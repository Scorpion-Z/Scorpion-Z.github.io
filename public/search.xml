<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linux chown 命令</title>
    <url>/2021/05/11/17-36-00/</url>
    <content><![CDATA[<p>Linux chown（英文全拼：<strong>change owner</strong>）命令用于设置文件所有者和文件关联组的命令。</p>
<p>Linux/Unix 是多人多工操作系统，所有的文件皆有拥有者。利用 chown 将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户 ID，组可以是组名或者组 ID，文件是以空格分开的要改变权限的文件列表，支持通配符。 。</p>
<p>chown 需要超级用户 <strong>root</strong> 的权限才能执行此命令。</p>
<p>只有超级用户和属于组的文件所有者才能变更文件关联组。非超级用户如需要设置关联组可能需要使用 <a href="https://www.runoob.com/linux/linux-comm-chgrp.html">chgrp</a> 命令。</p>
<p><strong>使用权限</strong> : root</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown [-cfhvR] [--help] [--version] user[:group] file...</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong> :</p>
<ul>
<li>user : 新的文件拥有者的使用者 ID</li>
<li>group : 新的文件拥有者的使用者组(group)</li>
<li>-c : 显示更改的部分的信息</li>
<li>-f : 忽略错误信息</li>
<li>-h :修复符号链接</li>
<li>-v : 显示详细的处理信息</li>
<li>-R : 处理指定目录以及其子目录下的所有文件</li>
<li>–help : 显示辅助说明</li>
<li>–version : 显示版本</li>
</ul>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>把 /var/run/httpd.pid 的所有者设置 root：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown root /var/run/httpd.pid</span><br></pre></td></tr></table></figure>

<p>将文件 file1.txt 的拥有者设为 runoob，群体的使用者 runoobgroup :</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown runoob:runoobgroup file1.txt</span><br></pre></td></tr></table></figure>

<p>将当前前目录下的所有文件与子目录的拥有者皆设为 runoob，群体的使用者 runoobgroup:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown -R runoob:runoobgroup *</span><br></pre></td></tr></table></figure>

<p>把 /home/runoob 的关联组设置为 512 （关联组ID），不改变所有者：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown :512 /home/runoob</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux技术</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7重置root密码</title>
    <url>/2021/05/18/15-04-33/</url>
    <content><![CDATA[<h4 id="重启系统，在开机过程中，出现下图界面时按e键，进入编辑界面。"><a href="#重启系统，在开机过程中，出现下图界面时按e键，进入编辑界面。" class="headerlink" title="重启系统，在开机过程中，出现下图界面时按e键，进入编辑界面。"></a>重启系统，在开机过程中，出现下图界面时按e键，进入编辑界面。</h4><p><img src="https://github.com/Scorpion-Z/picgo/raw/main/PICGOO/202003022130112789670.png" alt="1界面时按e键.png"></p>
<p>按e键之后进入如下界面：</p>
<p><img src="https://github.com/Scorpion-Z/picgo/raw/main/PICGOO/202003022130322702182.png" alt="2按e键之后进入如下界面.png"></p>
<h4 id="按方向键下键↓，找到设置语言的地方，如LANG-en-US-UTF-8，在后面追加rw-single-init-bin-bash-然后按ctrl-x重启系统"><a href="#按方向键下键↓，找到设置语言的地方，如LANG-en-US-UTF-8，在后面追加rw-single-init-bin-bash-然后按ctrl-x重启系统" class="headerlink" title="按方向键下键↓，找到设置语言的地方，如LANG=en_US.UTF-8，在后面追加rw single init=/bin/bash,然后按ctrl+x重启系统"></a>按方向键下键↓，找到设置语言的地方，如LANG=en_US.UTF-8，在后面追加rw single init=/bin/bash,然后按ctrl+x重启系统</h4><p><img src="https://github.com/Scorpion-Z/picgo/raw/main/PICGOO/202003022130473066238.png" alt="3按ctrl+x重启系统.png"></p>
<h4 id="进入bash界面后，可以输入passwd-root命令重新设置root密码"><a href="#进入bash界面后，可以输入passwd-root命令重新设置root密码" class="headerlink" title="进入bash界面后，可以输入passwd root命令重新设置root密码"></a>进入bash界面后，可以输入passwd root命令重新设置root密码</h4><p><img src="https://github.com/Scorpion-Z/picgo/raw/main/PICGOO/202003022131082775472.png" alt="4进入bash界面后.png"></p>
<p>如果开启了SELinux，执行命令touch /.autorelabel命令</p>
<p>输入exec /sbin/init命令重启系统</p>
<h4 id="使用新设置的密码进入系统之后，为了安全起见，可以输入reboot重新启动一次系统。"><a href="#使用新设置的密码进入系统之后，为了安全起见，可以输入reboot重新启动一次系统。" class="headerlink" title="使用新设置的密码进入系统之后，为了安全起见，可以输入reboot重新启动一次系统。"></a>使用新设置的密码进入系统之后，为了安全起见，可以输入reboot重新启动一次系统。</h4><p><img src="https://github.com/Scorpion-Z/picgo/raw/main/PICGOO/202003022131262432976.png" alt="5输入reboot重新启动.png"></p>
<blockquote>
<p><font color=red><strong>注意:</strong></font>下面的两条命令一定是要输入的,不输入或者输错会造成无法登陆的情况.</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch /.autorelabel</span><br><span class="line"><span class="built_in">exec</span> /sbin/init</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Linux技术</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>VMWare下CentOS/RedHat的虚拟机根分区LVM扩容</title>
    <url>/2021/05/19/17-22-20/</url>
    <content><![CDATA[<h4 id="Linux磁盘管理基础知识介绍"><a href="#Linux磁盘管理基础知识介绍" class="headerlink" title="Linux磁盘管理基础知识介绍"></a>Linux磁盘管理基础知识介绍</h4><ul>
<li><p>物理卷（Physical Volume,PV）：就是指硬盘分区，也可以是整个硬盘或已创建的软RAID，是LVM的基本存储设备。</p>
</li>
<li><p>卷组（Volume Group,VG）：是由一个或多个物理卷所组成的存储池，在卷组上能创建一个或多个逻辑卷。</p>
</li>
<li><p>逻辑卷（Logical Volume,LV）：类似于非LVM系统中的硬盘分区，它建立在卷组之上，是一个标准的块设备，在逻辑卷之上可以建立文件系统。</p>
</li>
</ul>
<h4 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h4><p>查看磁盘分区情况</p>
<p>fdisk -l</p>
<p><img src="https://github.com/Scorpion-Z/picgo/raw/main/PICGOO/24920309-00028ffeea417208.png" alt="img"></p>
<p>根据上面的命令查看到未分区的磁盘/dev/sdc，进行分区</p>
<p>fdisk /dev/sdc</p>
<p><img src="https://github.com/Scorpion-Z/picgo/raw/main/PICGOO/24920309-da16c9346248775a.png" alt="img"></p>
<p>对于上面的操作，依次输入 n 新建分区 -&gt; p 主分区 -&gt; 划分大小，默认全部，回车两次 -&gt; 这里设置分区类型 输入t -&gt; 回车，默认分区 -&gt; 输入 L 显示所有的分区 id, 这里LVM 是8e,输入 8e -&gt; 配置完后 输入w 保存退出</p>
<p><img src="https://github.com/Scorpion-Z/picgo/raw/main/PICGOO/24920309-a7d6cb26e1b656a3.png" alt="img"></p>
<p>查看新建分区的编号,可以看到是 /dev/sdc1</p>
<p> fdisk -l</p>
<p><img src="https://github.com/Scorpion-Z/picgo/raw/main/PICGOO/24920309-00028ffeea417208.png" alt="img"></p>
<p>分区完后，需求重启一下</p>
<p>reboot</p>
<p>为了让之后的LVM可以使用到这个分区，我们需要在新的分区 /dev/sda3 上创建物理卷PV</p>
<p>pvcreate /dev/sda3</p>
<p>查看卷组</p>
<p>pvgdisplay</p>
<p><img src="https://github.com/Scorpion-Z/picgo/raw/main/PICGOO/24920309-8f2d0272b113fcf8.png" alt="img"></p>
<p>扩容组的大小，centos 是本机的VG Name，每个系统的名字不同，需要用vgdisplay提前查看</p>
<p>vgextend centos /dev/sdc1</p>
<p>查看系统 PV 情况</p>
<p>pvscan</p>
<p><img src="https://github.com/Scorpion-Z/picgo/raw/main/PICGOO/24920309-e1c14c372b64f7ad.png" alt="img"></p>
<p>接下来就是需要增大逻辑卷了，先查看系统的逻辑卷组</p>
<p>lvdisplay</p>
<p><img src="https://github.com/Scorpion-Z/picgo/raw/main/PICGOO/24920309-3a866a0eb5141d79.png" alt="img"></p>
<p>如上图，/dev/centos/root 是当前逻辑卷LVM的挂载路径,使用以下命令扩展改逻辑卷</p>
<p>lvextend -l +100%free /dev/centos/root /dev/sdc1</p>
<p>逻辑卷扩展完成，还需要让系统能否使用上新的区域，先查看系统的文件系统：</p>
<p>df -TH</p>
<p><img src="https://github.com/Scorpion-Z/picgo/raw/main/PICGOO/24920309-066961be9a4398ca.png" alt="img"></p>
<p>文件系统是ext，需要使用命令 resize2fs /dev/centos/root 一般centos 是xfs,unbuntu是ext3</p>
<p>xfs_growfs /dev/centos/root</p>
<p><img src="https://github.com/Scorpion-Z/picgo/raw/main/PICGOO/24920309-255cfef43c2fded8.png" alt="img"></p>
<h4 id="Over"><a href="#Over" class="headerlink" title="Over!"></a>Over!</h4>]]></content>
      <categories>
        <category>VMware</category>
      </categories>
      <tags>
        <tag>VMware Linux LVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 磁盘管理</title>
    <url>/2021/05/11/17-55-45/</url>
    <content><![CDATA[<p>Linux磁盘管理好坏直接关系到整个系统的性能问题。</p>
<p>Linux磁盘管理常用三个命令为df、du和fdisk。</p>
<ul>
<li>df：列出文件系统的整体磁盘使用量</li>
<li>du：检查磁盘空间使用量</li>
<li>fdisk：用于磁盘分区</li>
</ul>
<hr>
<h2 id="df"><a href="#df" class="headerlink" title="df"></a>df</h2><p>df命令参数功能：检查文件系统的磁盘空间占用情况。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df [-ahikHTm] [目录或文件名]</span><br></pre></td></tr></table></figure>

<p>选项与参数：</p>
<ul>
<li>-a ：列出所有的文件系统，包括系统特有的 /proc 等文件系统；</li>
<li>-k ：以 KBytes 的容量显示各文件系统；</li>
<li>-m ：以 MBytes 的容量显示各文件系统；</li>
<li>-h ：以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示；</li>
<li>-H ：以 M=1000K 取代 M=1024K 的进位方式；</li>
<li>-T ：显示文件系统类型, 连同该 partition 的 filesystem 名称 (例如 ext3) 也列出；</li>
<li>-i ：不用硬盘容量，而以 inode 的数量来显示</li>
</ul>
<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例 1"></a>实例 1</h3><p>将系统内所有的文件系统列出来！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# df</span><br><span class="line">Filesystem      1K-blocks      Used Available Use% Mounted on</span><br><span class="line">/dev/hdc2         9920624   3823112   5585444  41% /</span><br><span class="line">/dev/hdc3         4956316    141376   4559108   4% /home</span><br><span class="line">/dev/hdc1          101086     11126     84741  12% /boot</span><br><span class="line">tmpfs              371332         0    371332   0% /dev/shm</span><br></pre></td></tr></table></figure>

<p>在 Linux 底下如果 df 没有加任何选项，那么默认会将系统内所有的 (不含特殊内存内的文件系统与 swap) 都以 1 Kbytes 的容量来列出来！</p>
<h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例 2"></a>实例 2</h3><p>将容量结果以易读的容量格式显示出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# df -h</span><br><span class="line">Filesystem            Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/hdc2             9.5G  3.7G  5.4G  41% /</span><br><span class="line">/dev/hdc3             4.8G  139M  4.4G   4% /home</span><br><span class="line">/dev/hdc1              99M   11M   83M  12% /boot</span><br><span class="line">tmpfs                 363M     0  363M   0% /dev/shm</span><br></pre></td></tr></table></figure>

<h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例 3"></a>实例 3</h3><p>将系统内的所有特殊文件格式及名称都列出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# df -aT</span><br><span class="line">Filesystem    Type 1K-blocks    Used Available Use% Mounted on</span><br><span class="line">/dev/hdc2     ext3   9920624 3823112   5585444  41% /</span><br><span class="line">proc          proc         0       0         0   -  /proc</span><br><span class="line">sysfs        sysfs         0       0         0   -  /sys</span><br><span class="line">devpts      devpts         0       0         0   -  /dev/pts</span><br><span class="line">/dev/hdc3     ext3   4956316  141376   4559108   4% /home</span><br><span class="line">/dev/hdc1     ext3    101086   11126     84741  12% /boot</span><br><span class="line">tmpfs        tmpfs    371332       0    371332   0% /dev/shm</span><br><span class="line">none   binfmt_misc         0       0         0   -  /proc/sys/fs/binfmt_misc</span><br><span class="line">sunrpc  rpc_pipefs         0       0         0   -  /var/lib/nfs/rpc_pipefs</span><br></pre></td></tr></table></figure>

<h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例 4"></a>实例 4</h3><p>将 /etc 底下的可用的磁盘容量以易读的容量格式显示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# df -h /etc</span><br><span class="line">Filesystem            Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/hdc2             9.5G  3.7G  5.4G  41% /</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="du"><a href="#du" class="headerlink" title="du"></a>du</h2><p>Linux du命令也是查看使用空间的，但是与df命令不同的是Linux du命令是对文件和目录磁盘使用的空间的查看，还是和df命令有一些区别的，这里介绍Linux du命令。</p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">du [-ahskm] 文件或目录名称</span><br></pre></td></tr></table></figure>

<p>选项与参数：</p>
<ul>
<li>-a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。</li>
<li>-h ：以人们较易读的容量格式 (G/M) 显示；</li>
<li>-s ：列出总量而已，而不列出每个各别的目录占用容量；</li>
<li>-S ：不包括子目录下的总计，与 -s 有点差别。</li>
<li>-k ：以 KBytes 列出容量显示；</li>
<li>-m ：以 MBytes 列出容量显示；</li>
</ul>
<h3 id="实例-1-1"><a href="#实例-1-1" class="headerlink" title="实例 1"></a>实例 1</h3><p>只列出当前目录下的所有文件夹容量（包括隐藏文件夹）:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# du</span><br><span class="line">8       ./test4     &lt;==每个目录都会列出来</span><br><span class="line">8       ./test2</span><br><span class="line">....中间省略....</span><br><span class="line">12      ./.gconfd   &lt;==包括隐藏文件的目录</span><br><span class="line">220     .           &lt;==这个目录(.)所占用的总量</span><br></pre></td></tr></table></figure>

<p>直接输入 du 没有加任何选项时，则 du 会分析当前所在目录的文件与目录所占用的硬盘空间。</p>
<h3 id="实例-2-1"><a href="#实例-2-1" class="headerlink" title="实例 2"></a>实例 2</h3><p>将文件的容量也列出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# du -a</span><br><span class="line">12      ./install.log.syslog   &lt;==有文件的列表了</span><br><span class="line">8       ./.bash_logout</span><br><span class="line">8       ./test4</span><br><span class="line">8       ./test2</span><br><span class="line">....中间省略....</span><br><span class="line">12      ./.gconfd</span><br><span class="line">220     .</span><br></pre></td></tr></table></figure>

<h3 id="实例-3-1"><a href="#实例-3-1" class="headerlink" title="实例 3"></a>实例 3</h3><p>检查根目录底下每个目录所占用的容量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# du -sm /*</span><br><span class="line">7       /bin</span><br><span class="line">6       /boot</span><br><span class="line">.....中间省略....</span><br><span class="line">0       /proc</span><br><span class="line">.....中间省略....</span><br><span class="line">1       /tmp</span><br><span class="line">3859    /usr     &lt;==系统初期最大就是他了啦！</span><br><span class="line">77      /var</span><br></pre></td></tr></table></figure>

<p>通配符 * 来代表每个目录。</p>
<p>与 df 不一样的是，du 这个命令其实会直接到文件系统内去搜寻所有的文件数据。</p>
<hr>
<h2 id="fdisk"><a href="#fdisk" class="headerlink" title="fdisk"></a>fdisk</h2><p>fdisk 是 Linux 的磁盘分区表操作工具。</p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fdisk [-l] 装置名称</span><br></pre></td></tr></table></figure>

<p>选项与参数：</p>
<ul>
<li>-l ：输出后面接的装置所有的分区内容。若仅有 fdisk -l 时， 则系统将会把整个系统内能够搜寻到的装置的分区均列出来。</li>
</ul>
<h3 id="实例-1-2"><a href="#实例-1-2" class="headerlink" title="实例 1"></a>实例 1</h3><p>列出所有分区信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@AY120919111755c246621 tmp]# fdisk -l</span><br><span class="line"></span><br><span class="line">Disk /dev/xvda: 21.5 GB, 21474836480 bytes</span><br><span class="line">255 heads, 63 sectors/track, 2610 cylinders</span><br><span class="line">Units = cylinders of 16065 * 512 = 8225280 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk identifier: 0x00000000</span><br><span class="line"></span><br><span class="line">    Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/xvda1   *           1        2550    20480000   83  Linux</span><br><span class="line">/dev/xvda2            2550        2611      490496   82  Linux swap / Solaris</span><br><span class="line"></span><br><span class="line">Disk /dev/xvdb: 21.5 GB, 21474836480 bytes</span><br><span class="line">255 heads, 63 sectors/track, 2610 cylinders</span><br><span class="line">Units = cylinders of 16065 * 512 = 8225280 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk identifier: 0x56f40944</span><br><span class="line"></span><br><span class="line">    Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/xvdb2               1        2610    20964793+  83  Linux</span><br></pre></td></tr></table></figure>

<h3 id="实例-2-2"><a href="#实例-2-2" class="headerlink" title="实例 2"></a>实例 2</h3><p>找出你系统中的根目录所在磁盘，并查阅该硬盘内的相关信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# df /            &lt;==注意：重点在找出磁盘文件名而已</span><br><span class="line">Filesystem           1K-blocks      Used Available Use% Mounted on</span><br><span class="line">/dev/hdc2              9920624   3823168   5585388  41% /</span><br><span class="line"></span><br><span class="line">[root@www ~]# fdisk /dev/hdc  &lt;==仔细看，不要加上数字喔！</span><br><span class="line">The number of cylinders for this disk is set to 5005.</span><br><span class="line">There is nothing wrong with that, but this is larger than 1024,</span><br><span class="line">and could in certain setups cause problems with:</span><br><span class="line">1) software that runs at boot time (e.g., old versions of LILO)</span><br><span class="line">2) booting and partitioning software from other OSs</span><br><span class="line">   (e.g., DOS FDISK, OS/2 FDISK)</span><br><span class="line"></span><br><span class="line">Command (m for help):     &lt;==等待你的输入！</span><br></pre></td></tr></table></figure>

<p>输入 m 后，就会看到底下这些命令介绍</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Command (m for help): m   &lt;== 输入 m 后，就会看到底下这些命令介绍</span><br><span class="line">Command action</span><br><span class="line">   a   toggle a bootable flag</span><br><span class="line">   b   edit bsd disklabel</span><br><span class="line">   c   toggle the dos compatibility flag</span><br><span class="line">   d   delete a partition            &lt;==删除一个partition</span><br><span class="line">   l   list known partition types</span><br><span class="line">   m   print this menu</span><br><span class="line">   n   add a new partition           &lt;==新增一个partition</span><br><span class="line">   o   create a new empty DOS partition table</span><br><span class="line">   p   print the partition table     &lt;==在屏幕上显示分割表</span><br><span class="line">   q   quit without saving changes   &lt;==不储存离开fdisk程序</span><br><span class="line">   s   create a new empty Sun disklabel</span><br><span class="line">   t   change a partition&#x27;s system id</span><br><span class="line">   u   change display/entry units</span><br><span class="line">   v   verify the partition table</span><br><span class="line">   w   write table to disk and exit  &lt;==将刚刚的动作写入分割表</span><br><span class="line">   x   extra functionality (experts only)</span><br></pre></td></tr></table></figure>

<p>离开 fdisk 时按下 <code>q</code>，那么所有的动作都不会生效！相反的， 按下<code>w</code>就是动作生效的意思。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Command (m for help): p  &lt;== 这里可以输出目前磁盘的状态</span><br><span class="line"></span><br><span class="line">Disk /dev/hdc: 41.1 GB, 41174138880 bytes        &lt;==这个磁盘的文件名与容量</span><br><span class="line">255 heads, 63 sectors/track, 5005 cylinders      &lt;==磁头、扇区与磁柱大小</span><br><span class="line">Units = cylinders of 16065 * 512 = 8225280 bytes &lt;==每个磁柱的大小</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/hdc1   *           1          13      104391   83  Linux</span><br><span class="line">/dev/hdc2              14        1288    10241437+  83  Linux</span><br><span class="line">/dev/hdc3            1289        1925     5116702+  83  Linux</span><br><span class="line">/dev/hdc4            1926        5005    24740100    5  Extended</span><br><span class="line">/dev/hdc5            1926        2052     1020096   82  Linux swap / Solaris</span><br><span class="line"># 装置文件名 启动区否 开始磁柱    结束磁柱  1K大小容量 磁盘分区槽内的系统</span><br><span class="line"></span><br><span class="line">Command (m for help): q</span><br></pre></td></tr></table></figure>

<p>想要不储存离开吗？按下 q 就对了！不要随便按 w 啊！</p>
<p>使用 <code>p</code> 可以列出目前这颗磁盘的分割表信息，这个信息的上半部在显示整体磁盘的状态。</p>
<hr>
<h3 id="磁盘格式化"><a href="#磁盘格式化" class="headerlink" title="磁盘格式化"></a>磁盘格式化</h3><p>磁盘分割完毕后自然就是要进行文件系统的格式化，格式化的命令非常的简单，使用 <code>mkfs</code>（make filesystem） 命令。</p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkfs [-t 文件系统格式] 装置文件名</span><br></pre></td></tr></table></figure>

<p>选项与参数：</p>
<ul>
<li>-t ：可以接文件系统格式，例如 ext3, ext2, vfat 等(系统有支持才会生效)</li>
</ul>
<h3 id="实例-1-3"><a href="#实例-1-3" class="headerlink" title="实例 1"></a>实例 1</h3><p>查看 mkfs 支持的文件格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# mkfs[tab][tab]</span><br><span class="line">mkfs         mkfs.cramfs  mkfs.ext2    mkfs.ext3    mkfs.msdos   mkfs.vfat</span><br></pre></td></tr></table></figure>

<p>按下两个[tab]，会发现 mkfs 支持的文件格式如上所示。</p>
<h3 id="实例-2-3"><a href="#实例-2-3" class="headerlink" title="实例 2"></a>实例 2</h3><p>将分区 /dev/hdc6（可指定你自己的分区） 格式化为 ext3 文件系统：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# mkfs -t ext3 /dev/hdc6</span><br><span class="line">mke2fs 1.39 (29-May-2006)</span><br><span class="line">Filesystem label=                &lt;==这里指的是分割槽的名称(label)</span><br><span class="line">OS type: Linux</span><br><span class="line">Block size=4096 (log=2)          &lt;==block 的大小配置为 4K </span><br><span class="line">Fragment size=4096 (log=2)</span><br><span class="line">251392 inodes, 502023 blocks     &lt;==由此配置决定的inode/block数量</span><br><span class="line">25101 blocks (5.00%) reserved for the super user</span><br><span class="line">First data block=0</span><br><span class="line">Maximum filesystem blocks=515899392</span><br><span class="line">16 block groups</span><br><span class="line">32768 blocks per group, 32768 fragments per group</span><br><span class="line">15712 inodes per group</span><br><span class="line">Superblock backups stored on blocks:</span><br><span class="line">        32768, 98304, 163840, 229376, 294912</span><br><span class="line"></span><br><span class="line">Writing inode tables: done</span><br><span class="line">Creating journal (8192 blocks): done &lt;==有日志记录</span><br><span class="line">Writing superblocks and filesystem accounting information: done</span><br><span class="line"></span><br><span class="line">This filesystem will be automatically checked every 34 mounts or</span><br><span class="line">180 days, whichever comes first.  Use tune2fs -c or -i to override.</span><br><span class="line"># 这样就创建起来我们所需要的 Ext3 文件系统了！简单明了！</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="磁盘检验"><a href="#磁盘检验" class="headerlink" title="磁盘检验"></a>磁盘检验</h2><p>fsck（file system check）用来检查和维护不一致的文件系统。</p>
<p>若系统掉电或磁盘发生问题，可利用fsck命令对文件系统进行检查。</p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fsck [-t 文件系统] [-ACay] 装置名称</span><br></pre></td></tr></table></figure>

<p>选项与参数：</p>
<ul>
<li>-t : 给定档案系统的型式，若在 /etc/fstab 中已有定义或 kernel 本身已支援的则不需加上此参数</li>
<li>-s : 依序一个一个地执行 fsck 的指令来检查</li>
<li>-A : 对/etc/fstab 中所有列出来的 分区（partition）做检查</li>
<li>-C : 显示完整的检查进度</li>
<li>-d : 打印出 e2fsck 的 debug 结果</li>
<li>-p : 同时有 -A 条件时，同时有多个 fsck 的检查一起执行</li>
<li>-R : 同时有 -A 条件时，省略 / 不检查</li>
<li>-V : 详细显示模式</li>
<li>-a : 如果检查有错则自动修复</li>
<li>-r : 如果检查有错则由使用者回答是否修复</li>
<li>-y : 选项指定检测每个文件是自动输入yes，在不确定那些是不正常的时候，可以执行 # fsck -y 全部检查修复。</li>
</ul>
<h3 id="实例-1-4"><a href="#实例-1-4" class="headerlink" title="实例 1"></a>实例 1</h3><p>查看系统有多少文件系统支持的 fsck 命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# fsck[tab][tab]</span><br><span class="line">fsck         fsck.cramfs  fsck.ext2    fsck.ext3    fsck.msdos   fsck.vfat</span><br></pre></td></tr></table></figure>

<h3 id="实例-2-4"><a href="#实例-2-4" class="headerlink" title="实例 2"></a>实例 2</h3><p>强制检测 /dev/hdc6 分区:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# fsck -C -f -t ext3 /dev/hdc6 </span><br><span class="line">fsck 1.39 (29-May-2006)</span><br><span class="line">e2fsck 1.39 (29-May-2006)</span><br><span class="line">Pass 1: Checking inodes, blocks, and sizes</span><br><span class="line">Pass 2: Checking directory structure</span><br><span class="line">Pass 3: Checking directory connectivity</span><br><span class="line">Pass 4: Checking reference counts</span><br><span class="line">Pass 5: Checking group summary information</span><br><span class="line">vbird_logical: 11/251968 files (9.1% non-contiguous), 36926/1004046 blocks</span><br></pre></td></tr></table></figure>

<p>如果没有加上 -f 的选项，则由于这个文件系统不曾出现问题，检查的经过非常快速！若加上 -f 强制检查，才会一项一项的显示过程。</p>
<hr>
<h2 id="磁盘挂载与卸除"><a href="#磁盘挂载与卸除" class="headerlink" title="磁盘挂载与卸除"></a>磁盘挂载与卸除</h2><p>Linux 的磁盘挂载使用 <code>mount</code> 命令，卸载使用 <code>umount</code> 命令。</p>
<p>磁盘挂载语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mount [-t 文件系统] [-L Label名] [-o 额外选项] [-n]  装置文件名  挂载点</span><br></pre></td></tr></table></figure>

<h3 id="实例-1-5"><a href="#实例-1-5" class="headerlink" title="实例 1"></a>实例 1</h3><p>用默认的方式，将刚刚创建的 /dev/hdc6 挂载到 /mnt/hdc6 上面！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# mkdir /mnt/hdc6</span><br><span class="line">[root@www ~]# mount /dev/hdc6 /mnt/hdc6</span><br><span class="line">[root@www ~]# df</span><br><span class="line">Filesystem           1K-blocks      Used Available Use% Mounted on</span><br><span class="line">.....中间省略.....</span><br><span class="line">/dev/hdc6              1976312     42072   1833836   3% /mnt/hdc6</span><br></pre></td></tr></table></figure>

<p>磁盘卸载命令 <code>umount</code> 语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">umount [-fn] 装置文件名或挂载点</span><br></pre></td></tr></table></figure>

<p>选项与参数：</p>
<ul>
<li>-f ：强制卸除！可用在类似网络文件系统 (NFS) 无法读取到的情况下；</li>
<li>-n ：不升级 /etc/mtab 情况下卸除。</li>
</ul>
<p>卸载/dev/hdc6</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# umount /dev/hdc6     </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux技术</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>lsblk命令</title>
    <url>/2021/05/19/10-39-28/</url>
    <content><![CDATA[<p>lsblk命令-“list block”，即用于列出所有可用块设备的信息，而且还能显示他们之间的依赖关系，但是它不会列出RAM盘的信息。</p>
<p>lsblk命令包含在util-linux-ng包中，现在该包改名为util-linux。</p>
<p><strong>语法格式：</strong>lsblk [参数]</p>
<p><strong>常用参数：</strong></p>
<table>
<thead>
<tr>
<th>-a</th>
<th>显示所有设备</th>
</tr>
</thead>
<tbody><tr>
<td>-b</td>
<td>以bytes方式显示设备大小</td>
</tr>
<tr>
<td>-d</td>
<td>不显示 slaves 或 holders</td>
</tr>
<tr>
<td>-D</td>
<td>print discard capabilities</td>
</tr>
<tr>
<td>-e</td>
<td>排除设备</td>
</tr>
<tr>
<td>-f</td>
<td>显示文件系统信息</td>
</tr>
<tr>
<td>-h</td>
<td>显示帮助信息</td>
</tr>
<tr>
<td>-i</td>
<td>use ascii characters only</td>
</tr>
<tr>
<td>-m</td>
<td>显示权限信息</td>
</tr>
<tr>
<td>-l</td>
<td>使用列表格式显示</td>
</tr>
<tr>
<td>-n</td>
<td>不显示标题</td>
</tr>
<tr>
<td>-o</td>
<td>输出列</td>
</tr>
<tr>
<td>-P</td>
<td>使用key=”value”格式显示</td>
</tr>
<tr>
<td>-r</td>
<td>使用原始格式显示</td>
</tr>
<tr>
<td>-t</td>
<td>显示拓扑结构信息</td>
</tr>
</tbody></table>
<p><strong>参考实例</strong></p>
<p>lsblk命令默认情况下将以树状列出所有块设备：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~ ]# lsblk</span><br><span class="line">lsblk NAME   MAJ:MIN rm  SIZE RO type mountpoint</span><br><span class="line">sda      8:0    0 232.9G  0 disk </span><br><span class="line">├─sda1   8:1    0  46.6G  0 part / </span><br><span class="line">├─sda2   8:2    0     1K  0 part  </span><br><span class="line">├─sda5   8:5    0   190M  0 part /boot </span><br><span class="line">├─sda6   8:6    0   3.7G  0 part [SWAP] </span><br><span class="line">├─sda7   8:7    0  93.1G  0 part /data </span><br><span class="line">└─sda8   8:8    0  89.2G  0 part /personal </span><br><span class="line">sr0     11:0    1  1024M  0 rom</span><br></pre></td></tr></table></figure>

<p>7个栏目名称如下：</p>
<ol>
<li><strong>NAME</strong> ：这是块设备名。</li>
<li><strong>MAJ:MIN</strong> ：本栏显示主要和次要设备号。</li>
<li><strong>RM</strong> ：本栏显示设备是否可移动设备。注意，在本例中设备sdb和sr0的RM值等于1，这说明他们是可移动设备。</li>
<li><strong>SIZE</strong> ：本栏列出设备的容量大小信息。例如298.1G表明该设备大小为298.1GB，而1K表明该设备大小为1KB。</li>
<li><strong>RO</strong> ：该项表明设备是否为只读。在本案例中，所有设备的RO值为0，表明他们不是只读的。</li>
<li><strong>TYPE</strong> ：本栏显示块设备是否是磁盘或磁盘上的一个分区。在本例中，sda和sdb是磁盘，而sr0是只读存储（rom）。</li>
<li><strong>MOUNTPOINT</strong> ：本栏指出设备挂载的挂载点。</li>
</ol>
<p>默认选项不会列出所有空设备：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# lsblk -a </span><br></pre></td></tr></table></figure>

<p>也可以用于列出一个特定设备的拥有关系，同时也可以列出组和模式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# lsblk -m </span><br></pre></td></tr></table></figure>

<p>要获取SCSI设备的列表，你只能使用-S选项，该选项是用来以颠倒的顺序打印依赖的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># lsblk -S</span></span><br></pre></td></tr></table></figure>

<p>例如，你也许想要以列表格式列出设备，而不是默认的树状格式。可以将两个不同的选项组合，以获得期望的输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># lsblk -nl</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux技术</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>firewall-cmd</title>
    <url>/2021/05/19/11-07-27/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Linux技术</category>
      </categories>
      <tags>
        <tag>firewall-cmd</tag>
      </tags>
  </entry>
</search>
